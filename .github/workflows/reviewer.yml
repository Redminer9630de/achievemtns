name: Auto PR Creation and Review

on:
  workflow_dispatch:

jobs:
  create-pr-1:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Git Config
        run: |
          git config user.name "ReviewBot"
          git config user.email "reviewbot@example.com"
      - name: Create 100 PRs (1–100)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {1..100}; do
            BRANCH="pr-job1-$i-$(date +%s)"
            git checkout -b $BRANCH
            echo "// Job 1 Änderung $i" > file-job1-$i.js
            git add file-job1-$i.js
            git commit -m "Job1 PR $i"
            git push origin $BRANCH
            OUTPUT=$(gh pr create --title "Job1 PR $i" --body "Automatisch erstellter PR #$i von Job1" --head $BRANCH 2>&1) && SUCCESS=1 || SUCCESS=0
            echo "$OUTPUT"
            if [[ $SUCCESS -eq 0 && "$OUTPUT" == *"submitted too quickly"* ]]; then
              echo "Warte wegen 'submitted too quickly' 7 Sekunden..."
              sleep 7
            else
              sleep 2
            fi
          done

  create-pr-2:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Git Config
        run: |
          git config user.name "ReviewBot"
          git config user.email "reviewbot@example.com"
      - name: Create 100 PRs (101–200)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {101..200}; do
            BRANCH="pr-job2-$i-$(date +%s)"
            git checkout -b $BRANCH
            echo "// Job 2 Änderung $i" > file-job2-$i.js
            git add file-job2-$i.js
            git commit -m "Job2 PR $i"
            git push origin $BRANCH
            OUTPUT=$(gh pr create --title "Job2 PR $i" --body "Automatisch erstellter PR #$i von Job2" --head $BRANCH 2>&1) && SUCCESS=1 || SUCCESS=0
            echo "$OUTPUT"
            if [[ $SUCCESS -eq 0 && "$OUTPUT" == *"submitted too quickly"* ]]; then
              echo "Warte wegen 'submitted too quickly' 7 Sekunden..."
              sleep 7
            else
              sleep 2
            fi
          done

  create-pr-3:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Git Config
        run: |
          git config user.name "ReviewBot"
          git config user.email "reviewbot@example.com"
      - name: Create 100 PRs (201–300)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {201..300}; do
            BRANCH="pr-job3-$i-$(date +%s)"
            git checkout -b $BRANCH
            echo "// Job 3 Änderung $i" > file-job3-$i.js
            git add file-job3-$i.js
            git commit -m "Job3 PR $i"
            git push origin $BRANCH
            OUTPUT=$(gh pr create --title "Job3 PR $i" --body "Automatisch erstellter PR #$i von Job3" --head $BRANCH 2>&1) && SUCCESS=1 || SUCCESS=0
            echo "$OUTPUT"
            if [[ $SUCCESS -eq 0 && "$OUTPUT" == *"submitted too quickly"* ]]; then
              echo "Warte wegen 'submitted too quickly' 7 Sekunden..."
              sleep 7
            else
              sleep 2
            fi
          done

  create-pr-4:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Git Config
        run: |
          git config user.name "ReviewBot"
          git config user.email "reviewbot@example.com"
      - name: Create 100 PRs (301–400)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {301..400}; do
            BRANCH="pr-job4-$i-$(date +%s)"
            git checkout -b $BRANCH
            echo "// Job 4 Änderung $i" > file-job4-$i.js
            git add file-job4-$i.js
            git commit -m "Job4 PR $i"
            git push origin $BRANCH
            OUTPUT=$(gh pr create --title "Job4 PR $i" --body "Automatisch erstellter PR #$i von Job4" --head $BRANCH 2>&1) && SUCCESS=1 || SUCCESS=0
            echo "$OUTPUT"
            if [[ $SUCCESS -eq 0 && "$OUTPUT" == *"submitted too quickly"* ]]; then
              echo "Warte wegen 'submitted too quickly' 7 Sekunden..."
              sleep 7
            else
              sleep 2
            fi
          done

  create-pr-5:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Git Config
        run: |
          git config user.name "ReviewBot"
          git config user.email "reviewbot@example.com"
      - name: Create 100 PRs (401–500)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {401..500}; do
            BRANCH="pr-job5-$i-$(date +%s)"
            git checkout -b $BRANCH
            echo "// Job 5 Änderung $i" > file-job5-$i.js
            git add file-job5-$i.js
            git commit -m "Job5 PR $i"
            git push origin $BRANCH
            OUTPUT=$(gh pr create --title "Job5 PR $i" --body "Automatisch erstellter PR #$i von Job5" --head $BRANCH 2>&1) && SUCCESS=1 || SUCCESS=0
            echo "$OUTPUT"
            if [[ $SUCCESS -eq 0 && "$OUTPUT" == *"submitted too quickly"* ]]; then
              echo "Warte wegen 'submitted too quickly' 7 Sekunden..."
              sleep 7
            else
              sleep 2
            fi
          done

  auto-review:
    runs-on: ubuntu-latest
    needs:
      - create-pr-1
      - create-pr-2
      - create-pr-3
      - create-pr-4
      - create-pr-5
    steps:
      - uses: actions/checkout@v3
      - name: Install gh CLI & jq
        run: |
          sudo apt-get update && sudo apt-get install -y gh jq
      - name: Approve all open PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          PRS=$(gh pr list --state open --json number --jq '.[].number')
          for PR in $PRS; do
            gh pr review $PR --approve --body "✅ Automatisch genehmigt vom Workflow" --repo $REPO
            echo "✅ PR #$PR approved"
            sleep 2
          done
